import express from 'express'; import bcrypt from 'bcryptjs'; import jwt from 'jsonwebtoken'; import dotenv from 'dotenv'; dotenv.config(); import User from '../models/User.js'; import { sendOtpEmail } from '../utils/mailer.js';
const router = express.Router();
function genOTP(){ return Math.floor(100000+Math.random()*900000).toString(); }
router.post('/register', async (req,res)=>{ try{ const {name,email,password} = req.body; if(!name||!email||!password) return res.status(400).json({message:'Missing'}); const ex = await User.findOne({email}); if(ex) return res.status(400).json({message:'Email exists'}); const hashed = await bcrypt.hash(password,10); const u = new User({name,email,password:hashed,role:'user'}); await u.save(); res.json({message:'Registered'}); }catch(e){ console.error(e); res.status(500).json({message:'err'}); } });
router.post('/login', async (req,res)=>{ try{ const {email,password} = req.body; const user = await User.findOne({email}); if(!user) return res.status(400).json({message:'Invalid'}); const ok = await bcrypt.compare(password, user.password); if(!ok) return res.status(400).json({message:'Invalid'}); const otp = genOTP(); user.otp = otp; user.otpExpires = new Date(Date.now()+10*60*1000); await user.save(); const sent = await sendOtpEmail(email, otp); if(sent) return res.json({message:'OTP sent to email'}); return res.json({message:'OTP demo', otp}); }catch(e){ console.error(e); res.status(500).json({message:'err'}); } });
router.post('/verify-otp', async (req,res)=>{ try{ const {email,code} = req.body; const user = await User.findOne({email}); if(!user) return res.status(400).json({message:'Invalid'}); if(user.otp !== code || user.otpExpires < new Date()) return res.status(400).json({message:'OTP invalid or expired'}); user.otp = undefined; user.otpExpires = undefined; if(email === process.env.ADMIN_EMAIL) user.role='admin'; await user.save(); const token = jwt.sign({ id:user._id, role:user.role }, process.env.JWT_SECRET||'secret', { expiresIn:'7d' }); res.json({ token, user:{ id:user._id, email:user.email, name:user.name, role:user.role, points:user.points } }); }catch(e){ console.error(e); res.status(500).json({message:'err'}); } });
export default router;
