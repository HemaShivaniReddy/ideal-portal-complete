import express from 'express'; import Idea from '../models/Idea.js'; import User from '../models/User.js'; import { auth } from '../middleware/auth.js'; const router = express.Router();
router.post('/', auth, async (req,res)=>{ try{ const { title, problemStatement, existingSolution, proposedSolution, expectedImpact } = req.body; const idea = new Idea({ title, problemStatement, existingSolution, proposedSolution, expectedImpact, author:req.user.id }); await idea.save(); await User.findByIdAndUpdate(req.user.id, { $inc:{ points:5 } }); res.json(idea); }catch(e){ console.error(e); res.status(500).json({message:'err'}); } });
router.get('/', async (req,res)=>{ try{ const ideas = await Idea.find().populate('author','name email').sort({createdAt:-1}); res.json(ideas); }catch(e){ console.error(e); res.status(500).json({message:'err'}); } });
router.post('/:id/like', auth, async (req,res)=>{ try{ const idea = await Idea.findById(req.params.id); if(!idea) return res.status(404).json({message:'Not found'}); const exists = idea.likes.find(l=> l.toString()===req.user.id); if(exists){ idea.likes = idea.likes.filter(l=> l.toString()!==req.user.id); await idea.save(); await User.findByIdAndUpdate(req.user.id, { $inc:{ points:-1 } }); return res.json({message:'unliked'}); } idea.likes.push(req.user.id); await idea.save(); await User.findByIdAndUpdate(req.user.id, { $inc:{ points:1 } }); return res.json({message:'liked'}); }catch(e){ console.error(e); res.status(500).json({message:'err'}); } });
router.post('/:id/comment', auth, async (req,res)=>{ try{ const idea = await Idea.findById(req.params.id); if(!idea) return res.status(404).json({message:'Not found'}); idea.comments.push({ user:req.user.id, text:req.body.text, createdAt:new Date() }); await idea.save(); await User.findByIdAndUpdate(req.user.id, { $inc:{ points:2 } }); res.json({message:'comment added'}); }catch(e){ console.error(e); res.status(500).json({message:'err'}); } });
router.post('/:id/status', auth, async (req,res)=>{ try{ const { status } = req.body; const idea = await Idea.findById(req.params.id); if(!idea) return res.status(404).json({message:'Not found'}); const role = req.user.role; if(role==='manager' || role==='admin'){ idea.status = status; await idea.save(); return res.json({message:'status updated'}); } if(role==='expert'){ const allowed=['PeerReview','ExpertReview']; if(allowed.includes(idea.status) && allowed.includes(status)){ idea.status=status; await idea.save(); return res.json({message:'status updated by expert'}); } } return res.status(403).json({message:'Not allowed'}); }catch(e){ console.error(e); res.status(500).json({message:'err'}); } });
export default router;
